server:
  port: 8080

spring:

  profiles:
    active: my
  #jackson
  jackson:
    #日期格式化
    date-format: yyyy-MM-dd HH:mm:ss
    #date-format: yyyy-MM-dd
    #格式化输出
    serialization.indent_output: true
    #忽略无法转换的对象
    serialization.fail_on_empty_beans: false
    #设置空如何序列化
    defaultPropertyInclusion: NON_EMPTY
    #允许对象忽略json中不存在的属性
    deserialization.fail_on_unknown_properties: false
    #允许出现特殊字符和转义符
    parser.allow_unquoted_control_chars: true
    #允许出现单引号
    parser.allow_single_quotes: true



  kafka:
    bootstrap-servers: 192.168.2.100:9092,192.168.2.101:9092,192.168.2.102:9092
    consumer:
      # 指定一个默认的组名
      group-id: foo
      # earliest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
      # latest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
      # none:topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
      auto-offset-reset: earliest
      # key/value的反序列化
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      # key/value的序列化
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 批量抓取
      batch-size: 65536
      # 缓存容量
      buffer-memory: 524288
      # 服务器地址
      bootstrap-servers: 192.168.2.100:9092,192.168.2.101:9092,192.168.2.102:9092

  redis:
    host: 192.168.2.100
    port: 6379
    password: aB(D2f9
    # 连接超时时间（毫秒）
    timeout: 10000
    pool:
      # 连接池最大连接数（使用负值表示没有限制）
      max-active: 20
      # 连接池最大阻塞等待时间（使用负值表示没有限制）
      max-wait: -1
      # 连接池中的最大空闲连接
      max-idle: 8
      # 连接池中的最小空闲连接
      min-idle: 0
  mvc:
    static-path-pattern: /static/**
    view:
      prefix:
      suffix:
#  thymeleaf:
#    cache: false
#    enabled: false
  datasource:
    username: admin
    password: d12h.Po(_f
    url: jdbc:mysql://192.168.2.100:3306/Recv?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&useSSL=false&allowPublicKeyRetrieval=true
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      minimum-idle: 5
      maximum-pool-size: 15
      auto-commit: true
      idle-timeout: 30000
      pool-name: Recv
      max-lifetime: 1800000
      connection-timeout: 30000
      connection-test-query: select 1


## 该配置节点为独立的节点，有很多同学容易将这个配置放在spring的节点下，导致配置无法被识别
mybatis:
  mapper-locations: classpath*:com/nostyling/create/modular/dao/mapping/*.xml  #注意：一定要对应mapper映射xml文件的所在路径
  type-aliases-package: com.nostyling.create.modular.entity  # 注意：对应实体类的路径

###################  mybatis-plus配置  ###################
mybatis-plus:
  # 扫描 mapper.xml
  mapper-locations: classpath*:com/nostyling/create/**/mapping/*.xml
  typeAliasesPackage: com.nostyling.create.modular.entity
  global-config:
    db-config:
      column-underline: true

# Logger Config
logging:
  level:
    com.baomidou.mybatisplus.samples.deluxe: debug
#配置文件自定义属性
blog:
  address: https://blog.lqdev.cn
  author: oKong
  desc: ${blog.author},${blog.address},这是自定义属性
  # 随机字符串
  value: ${random.value}
  # 随机int
  number: ${random.int}
  # 随机long
  bignumber: ${random.long}
  # 10以内的随机数
  test1: ${random.int(10)}
  # 1-20的随机数
  test2: ${random.int[1,20]}

swagger:
  enabled: true
