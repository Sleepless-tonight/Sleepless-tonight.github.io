标题：Java

标签：Java、基础
时间：2018年7月16日17:47:18
连接：http://www.nostyling.cn/html/technology/java.txt

1、equals与==的区别
    ==与equals的主要区别是：==常用于比较原生类型，而equals()方法用于检查对象的相等性。另一个不同的点是：如果==和equals()用于比较对象，当两个引用地址相同，==返回true。而equals()可以返回true或者false主要取决于重写实现。最常见的一个例子，字符串的比较，不同情况==和equals()返回不同的结果。equals()方法最重要的一点是，能够根据业务要求去重写，按照自定义规则去判断两个对象是否相等。重写equals()方法的时候，要注意一下hashCode是否会因为对象的属性改变而改变，否则在使用散列集合储存该对象的时候会碰到坑！！理解equals()方法的存在是很重要的。


2、static：
    接口不涉及和任何具体实例相关的细节,因此接口没有构造方法,不能被实例化,没有实例变量，只有静态（static）变量。
    static修饰就表示它属于类的，随的类的加载而存在的，当JVM把字节码加载进JVM的时候，static修饰的成员已经在内存中存在了。
    如果是非static的话，就表示属于对象的，只有建立对象时才有它，而接口是不能建立对象的，所以接口的常量必须定义为static。

3、final：
    接口中不可以定义变量即定义的变量前都要加上final修饰，使之成为常量(没有final修饰的是变量，加上final修饰就会变成常量)。
    所以接口的属性默认是public static final 常量，且必须赋初值。（  final修饰就是保证接口定义的常量不能被实现类去修改，如果没有final的话，由子类随意去修改的话，接口建立这个常量就没有意义了。


4、this：
    this 这个关键字的最大作用就是让类中的一个方法，访问该类里的另一个方法或变量，

5、实体类别：
    Entity接近原始数据，Model接近业务对象～
    Entity：是专用于EF的对数据库表的操作，
    Model：是为页面提供数据和数据校验的，所以两者可以并存
    POJO：POJO是Plain OrdinaryJava Object的缩写不错，但是它通指没有使用Entity Beans的普通java对象，可以把POJO作为支持业务逻辑的协助类。

6、Ioc 和 DI
    框架的一个重要特征是用户定义的用于定制框架的方法通常从框架本身调用，而不是从用户的应用程序代码调用。该框架通常在协调和排序应用程序活动中扮演主要程序的角色。这种控制反转使框架具有作为可扩展骨架的能力。用户提供的方法定制框架中为特定应用程序定义的通用算法。
    库本质上是一组可以调用的函数。
    框架体现了一些抽象设计，内置了更多行为。为了使用它，您需要通过子类化或插入自己的类将行为插入到框架中的各个位置。然后框架的代码在这些点上调用您的代码。
    我将方法的控制权交给了框架系统。然后根据我对框架所做的设定，决定何时调用我的方法。控制被颠倒了 - 它叫我而不是我调用框架。这种现象是控制倒置（也称为好莱坞原则 - “不要打电话给我们，我们会打电话给你”）。
    它执行调用，您的代码作出反应 - 所以再次控制被反转。
    （个人总结：将 控制反转 称为 反向控制 就容易理解的多了。。。）
    Spring所倡导的开发方式就是如此，所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。
    控制的什么被反转了？就是：获得依赖对象的方式反转了。
    传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。
    IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过 DI（Dependency Injection，依赖注入）来实现的。
    DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。
    来自：https://www.martinfowler.com/bliki/InversionOfControl.html

7、Ioc 和 DI 和 POI
    控制反转和依赖注入是框架的特性，而 spring 的核心的精神是依赖注入！！！

8、面向对象
    面向对象的一个主要特性就是隐藏实现（不去暴露非必要暴露的对象成员），即一个对象的成员的可访问范围是必须要进行控制的，而公开的通常是方法，通常的做法是将对象属性私有，通过 get、set 方法来获得对象的属性。易于扩展、可复用、易维护、构建复杂系统 （继承 支持了 复用，多态 支持了 扩展，封装 支持了 构建复杂）



语言基础：
    1、Java语言基础、jvm、多线程编程、网络编程
        1.1、语言框架：
            netty、shrio、RabbitMQ、Quartz、dubbo、mybaitc、spring、springmvc、springboot、springcloud
    2、数据结构和算法、操作系统、计算机网络、设计模式
    3、Java语言基础
        1、关键字及其作用特性
        2、面向对象的理解
    4、Java多线程
        1、虚拟机的内存模型
        2、java.util.concurrent
    5、jvm
        1、《深入理解Java虚拟机》



