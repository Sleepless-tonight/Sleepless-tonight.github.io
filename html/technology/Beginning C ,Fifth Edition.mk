# Beginning C ,Fifth Edition
##### 前言&nbsp;
有抱负的程序员必将面对的三重障碍，遍布程序设计语言中的各类术语、理解如何使用语言元素（而不仅仅只是知道它们的概念）、领会如何在手机场景中应用该语言。

##### 第1章&nbsp;&nbsp;C 语言编程

##### 1.1&nbsp;&nbsp;C 语言

##### 1.2&nbsp;&nbsp;标准库
标准库定语了编写C程序时常常需要的常量、符号和函数。它还提供了基本C语言的一些可选扩展，标准库以不依赖及其的形式实现，即相同的C代码在不同的底层硬件上会实现相同的功能。

标准库在一系列文件——头文件中指定。头文件的扩展名总是.h。使用一组标准功能可用于C程序文件，只需要将队形标准头文件含进来。

##### 1.3&nbsp;&nbsp;学习 C

##### 1.4&nbsp;&nbsp;创建 C 程序
C 程序的创建工程有 4 个基本步骤：
- 编辑
- 编译
- 链接
- 执行

##### 1.4.1&nbsp;&nbsp;编辑
创建和修改 C 程序的源代码——我们编写的程序指令称之为源代码。

##### 1.4.2&nbsp;&nbsp;编译
编译器可以将源代码转换成机器语言，在编译过程中，会找到并报告错误。编译会生成对象代码，存放于对象文件它与源文件同名，这些文件在Windows中扩展名通常是 .obj,Linux中通常是.o

若编译器是GUN，编译命令是：

```
gcc -c main.c
```

编译过程包括两个阶段：第一个阶段称为预处理阶段，在此期间会修改或添加代码。第二阶段是生成对象代码的实际编译过程。源文件可以包含预处理宏，他们勇于添加或修改 C 语言程序。

##### 1.4.3&nbsp;&nbsp;链接
链接器（linker）将源代码文件中有编译器产生的各种对象模块组合起来，再从C语言提供的程序库中添加必要的代码块，将他们组合成一个可执行的文件，链接器也会检测和报告错误，可以将一个程序拆分成几个源代码文件，再用链接器连接起来，每个源文件提供部分功能，每个源文件分别编译。

链接阶段出现错误，意味着要重新编译源代码，链接成功则会产生一个可执行文件，但这并不意味着程序能正常工作。

##### 1.4.4&nbsp;&nbsp;执行
执行阶段就是当成功完成了前述 3 个过程后运行程序。

##### 1.5&nbsp;&nbsp;创建第一个程序

```
#include <stdio.h>
 
 int main(void){
     printf("Hello world!");
     return 0;
 }
 
```

##### 1.6&nbsp;&nbsp;编辑第一个程序

```
/* 注意 \" ， \"序列称之为转义序列（escape sequence）。 */
#include <stdio.h>
 
 int main(void){
     printf("Hello world!\n");
     return 0;
 }
 
```

##### 1.7&nbsp;&nbsp;处理错误

根据编译器提示，处理错误吧。

##### 1.8&nbsp;&nbsp;剖析一个简单的程序

##### 1.8.1&nbsp;&nbsp;注释

```
多行注释：/*    */；无论 /* 之后的任何文本都会被认为是注释直到标示注释结束的 */ 为止。
单行注释：//；代码行上两个斜杠后面的所有内容都会被编译器忽略。
```

##### 1.8.2&nbsp;&nbsp;预处理指令

下面的代码行：
```
#include <stdio.h>
```

符号 # 标示这是一个预处理指令（preprocessing directive），告诉编译器在编译源代码前，要先执行一些操作，编译器在编译过程开始前的预处理阶段处理这些指令，预处理指令相当多，大多数防御程序源文件的开头。

在这个例子中，编译器要将 stdio.h 文件的内容包含进来，这个文件称之为头文件（header file），因为它通常放在程序的开头出。在本例中，头文件定义了 C 标准库中的一些函数信息，通常，在头文件中指定的信息应有编译器用于在程序中集成预定义函数和其他全局对象，有时需要创建自己的头文件。本例中用到标准库中的printf()函数，所以必须包含 stdio.h 头文件。 stdio.h 头文件包含了编译器理解 printf() 以及其他输入/输出函数所需要的信息。名称 stdio 是标准输入/输出（standard input/output）的缩写。C 语言中石油的头文件的扩展名都是 .h 。

> 注意：
>
> &nbsp;&nbsp;&nbsp;&nbsp;在一些系统中，头文件名是不区分大小写的，但在#include 指令里，这些文件名通常是小写。

##### 1.8.3&nbsp;&nbsp;定义 main() 函数

下面的5行指令定义了main()函数：
```
 int main(void)
 {
     printf("Hello world!\n");
     return 0;
 }
```
函数是两个括号主键执行某组操作的一段代码，每个 C 程序都是由一个或多个函数组成，每个 C 程序都必须有个 main() 函数，main()函数是每个 C 程序的执行起点。在执行阶段执行可执行文件时，操作系统会执行这个程序的main()函数。

定义main()函数的第一行代码如下：
```
int main(void)
```
定义main()函数的第一行代码开头是一个关键字 int，它标示main()函数的返回值类型。

在下面的语句中，指定了执行完 main()函数后要返回的值：
```
return 0;
```
这个 return 语句结束了 main() 函数的执行。

函数名“main”后面的括号，是给函数main传递信息的入口，void 表示 给 main()函数传递的数据是无。

##### 1.8.4&nbsp;&nbsp;关键字

##### 1.8.5&nbsp;&nbsp;函数体
函数体是在函数名称后面起始及结束两个大括号之间的代码块。

每个函数必须有函数体，但函数体可以是空的。

##### 1.8.6&nbsp;&nbsp;输出信息

printf() 是一个标准的库函数，它会将给printf() 函数传递的信息输出到命令行上。

##### 1.8.6&nbsp;&nbsp;参数

包含在函数名后圆括号内的项称为参数，它是指要传递诶函数的数据，当一个函数有多个参数时，要用逗号隔开。















