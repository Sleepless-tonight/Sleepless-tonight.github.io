
### 变量
首先必须说明，Rust 是强类型语言，但具有自动判断变量类型的能力。

声明变量，需要使用 let 关键字
```rust
let a = 123;
```
a 就被确定为整型数字，不能把字符串类型的值赋给它。

使变量变得"可变"（mutable）只需一个 mut 关键字。
```
let mut a = 123;
a = 456;
```
变量的值可以"重新绑定"，但在"重新绑定"以前不能私自被改变，

### 重影（Shadowing）
重影就是刚才讲述的所谓"重新绑定"，重影就是指变量的名称可以被重新使用的机制。
```
fn main() {
    let x = 5;
    let x = x + 1;
    let x = x * 2;
    println!("The value of x is: {}", x);
    // The value of x is: 12
}
```
重影与可变变量的赋值不是一个概念，重影是指用同一个名字重新代表另一个变量实体，其类型、可变属性和值都可以变化。但可变变量赋值仅能发生值的变化。

### 常量
```
const a: i32 = 123;
```
比那辆可以允许重影